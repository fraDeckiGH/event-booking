scalar Currency
scalar DateTime
scalar EmailAddress
scalar JSON
# scalar JSONObject
scalar NonEmptyString
scalar PositiveInt
scalar Timestamp

interface Node {
  id: ID!
	ts: Timestamp! # out of place here?
}

type Event implements Node {
	id: ID!
	ts: Timestamp!
	creator: User!
	date: DateTime!
	description: NonEmptyString!
	price: Currency!
	title: NonEmptyString!
}
input EventInput {
	creator: ID!
	date: DateTime
	description: NonEmptyString
	price: Currency
	title: NonEmptyString!
}

type User implements Node {
	id: ID!
	ts: Timestamp!
	# createdEvents: [Event!]
	email: EmailAddress!
	nickname: NonEmptyString!
}
input UserInput {
	email: EmailAddress!
	nickname: NonEmptyString
	password: NonEmptyString!
}

interface Response {
  errorCode: NonEmptyString
}
interface ListResponse {
  errorCode: NonEmptyString
  pageInfo: PageInfo
}

type EventResponse implements Response {
  errorCode: NonEmptyString
  node: [Event!]
}
type UserResponse implements Response {
  errorCode: NonEmptyString
  node: [User!]
}
type UserListResponse implements ListResponse {
  errorCode: NonEmptyString
	pageInfo: PageInfo
  node: [User!]
}

type PageInfo {
	cursorAfter: JSON
}
input PageInfoInput {
	cursorAfter: JSON
	size: PositiveInt
}

type Mutation {
	createEvent(input: [EventInput!]!): EventResponse!
	createUser(input: [UserInput!]!): UserResponse!
}
type Query {
	listEvent: EventResponse!
	listUser(pageInfo: PageInfoInput): UserListResponse!
}
schema {
	mutation: Mutation
	query: Query
}


